package encryption

import (
	"bytes"
	"testing"
)

func TestCalculateHash(t *testing.T) {
	type testCase struct {
		input    []byte
		expected []byte
	}

	testCases := []testCase{
		{
			input: []byte("Hello, world!"),
			expected: []byte{
				0xa2,
				0x76,
				0x4d,
				0x13,
				0x3a,
				0x16,
				0x81,
				0x6b,
				0x58,
				0x47,
				0xa7,
				0x37,
				0xa7,
				0x86,
				0xf2,
				0xec,
				0xe4,
				0xc1,
				0x48,
				0x09,
				0x5c,
				0x5f,
				0xaa,
				0x73,
				0xe2,
				0x4b,
				0x4c,
				0xc5,
				0xd6,
				0x66,
				0xc3,
				0xe4,
				0x5e,
				0xc2,
				0x71,
				0x50,
				0x4e,
				0x14,
				0xdc,
				0x61,
				0x27,
				0xdd,
				0xfc,
				0xe4,
				0xe1,
				0x44,
				0xfb,
				0x23,
				0xb9,
				0x1a,
				0x6f,
				0x7b,
				0x04,
				0xb5,
				0x3d,
				0x69,
				0x55,
				0x02,
				0x29,
				0x07,
				0x22,
				0x95,
				0x3b,
				0x0f,
			},
		},
		{
			input: []byte(""),
			expected: []byte{
				0x78,
				0x6a,
				0x02,
				0xf7,
				0x42,
				0x01,
				0x59,
				0x03,
				0xc6,
				0xc6,
				0xfd,
				0x85,
				0x25,
				0x52,
				0xd2,
				0x72,
				0x91,
				0x2f,
				0x47,
				0x40,
				0xe1,
				0x58,
				0x47,
				0x61,
				0x8a,
				0x86,
				0xe2,
				0x17,
				0xf7,
				0x1f,
				0x54,
				0x19,
				0xd2,
				0x5e,
				0x10,
				0x31,
				0xaf,
				0xee,
				0x58,
				0x53,
				0x13,
				0x89,
				0x64,
				0x44,
				0x93,
				0x4e,
				0xb0,
				0x4b,
				0x90,
				0x3a,
				0x68,
				0x5b,
				0x14,
				0x48,
				0xb7,
				0x55,
				0xd5,
				0x6f,
				0x70,
				0x1a,
				0xfe,
				0x9b,
				0xe2,
				0xce,
			},
		},
		{
			input: []byte(
				"faddasfjdk102173781284---...,,,...---##''++\"\\sfklaskfdakjfojdsakdfsda.-012312",
			),
			expected: []byte{
				0x7c,
				0xea,
				0xdd,
				0xc5,
				0x64,
				0xe4,
				0xee,
				0x66,
				0xb1,
				0x87,
				0x10,
				0xc9,
				0x67,
				0x03,
				0xaa,
				0xcc,
				0x11,
				0x31,
				0x6e,
				0xa1,
				0x49,
				0xda,
				0x77,
				0xe5,
				0x7f,
				0xfe,
				0xdf,
				0x4c,
				0x2f,
				0x6e,
				0xfd,
				0x50,
				0x3b,
				0xcf,
				0x39,
				0x49,
				0xac,
				0x01,
				0x1a,
				0xf0,
				0x55,
				0x38,
				0xa6,
				0x2c,
				0xa1,
				0xe9,
				0xc9,
				0x19,
				0x46,
				0xcd,
				0xad,
				0x53,
				0x14,
				0xd0,
				0x16,
				0x0c,
				0x2b,
				0x7a,
				0x7b,
				0xe2,
				0x11,
				0x19,
				0x8c,
				0x87,
			},
		},
	}

	for _, test := range testCases {
		output := CalculateHash(test.input)
		if !bytes.Equal(output, test.expected) {
			t.Errorf("Output %x not equal to expected %x", output, test.expected)
		}
	}
}
